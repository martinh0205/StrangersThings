{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = \"Bearer ${token}\";\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    headers: makeHeaders(defaultOptions.token)\n  };\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n  const response = await fetch(`${BASEURL}${endpointPath}`, options);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPosts = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/posts\");\n    if (success) {\n      return {\n        error: null,\n        posts: data.posts\n      };\n    } else {\n      return {\n        error: error.message,\n        posts: []\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n    return {\n      error: \"Failed to load Posts\",\n      posts: []\n    };\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = callAPI(\"/users/register\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null\n    };\n  }\n};\n\n/*\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\n*/\n\nexport const fetchUser = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await fetch(\"/users/me\", {\n      token: token\n    });\n  } catch (error) {\n    console.error(\"failed to fetch user\", error);\n  }\n  if (success) {\n    return {\n      error: null,\n      username: data.user\n    };\n  } else {}\n};\n\n/* \nexport const fetchUser = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token),\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const { data } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\n*/\n\nexport const createPost = async () => {};","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","options","method","body","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","message","console","registerUser","username","password","user","fetchUser","createPost"],"sources":["/Users/martinhampton/Documents/course_work/StrangersThings/src/api/api.js"],"sourcesContent":["const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (token) {\n    headers[\"Authorization\"] = \"Bearer ${token}\";\n  }\n  return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions = {}) => {\n  const options = {\n    headers: makeHeaders(defaultOptions.token),\n  };\n\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n\n  const response = await fetch(`${BASEURL}${endpointPath}`, options);\n  const result = await response.json();\n\n  return result;\n};\n\nexport const fetchPosts = async (token) => {\n  try {\n    const { success, error, data } = await callAPI(\"/posts\");\n\n    if (success) {\n      return { error: null, posts: data.posts };\n    } else {\n      return {\n        error: error.message,\n        posts: [],\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n\n    return { error: \"Failed to load Posts\", posts: [] };\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const { success, error, data } = callAPI(\"/users/register\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password,\n        },\n      },\n    });\n\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message,\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null,\n    };\n  }\n};\n\n/*\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\n*/\n\nexport const fetchUser = async (token) => {\n  try {\n    const { success, error, data } = await fetch(\"/users/me\", {\n      token: token,\n    });\n  } catch (error) {\n    console.error(\"failed to fetch user\", error);\n  }\n\n  if (success) {\n    return {\n      error: null,\n      username: data.user,\n    };\n  } else {\n  }\n};\n\n/* \nexport const fetchUser = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token),\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const { data } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\n*/\n\nexport const createPost = async () => {};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}