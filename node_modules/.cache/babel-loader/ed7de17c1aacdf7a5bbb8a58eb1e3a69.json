{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    token,\n    method,\n    body\n  } = defaultOptions;\n  const options = {\n    headers: makeHeaders(token)\n  };\n  if (method) {\n    options.method = method;\n  }\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetch(`${BASEURL}${endpointPath}`, options);\n  const result = await response.json();\n  return result;\n};\n\n/* const callAPI = async (endpointPath, defaultOptions = {}) => {\n  const options = {\n    headers: makeHeaders(defaultOptions.token),\n  };\n\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n\n  try {\n    const response = await fetch(`${BASEURL}${endpointPath}`, options);\n    const { success, error, data } = await response.json();\n\n    if (success) {\n      return {\n        error: null,\n        data: data,\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null,\n      };\n    }\n  } catch (error) {\n    console.error(`Failed while calling ${endpointPath}:`, error);\n  }\n  return {\n    error: defaultOptions.defaultError,\n    data: null,\n  };\n\n  return result;\n};\n\n*/\n\n/* export const fetchPosts = async (token) => {\n  const { error, data } = await callAPI(\"/posts\", {\n    bodyKey: \"posts\",\n    defaultError: \"Failed to load Posts\",\n  });\n\n  return {\n    error,\n    posts: data ? data.posts : [],\n  };\n};\n\n*/\n\nexport const fetchPosts = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/posts\", {\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        posts: data.posts\n      };\n    } else {\n      return {\n        error: error.message,\n        posts: []\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n    return {\n      error: \"Failed to load Posts\",\n      posts: []\n    };\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/users/register\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null\n    };\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/users/login\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null\n    };\n  }\n};\n\n/*\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\n\n*/\n\nexport const fetchUser = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/users/me\", {\n      token: token\n    });\n    console.log(\"data\", data);\n    if (success) {\n      return {\n        error: null,\n        username: data.username\n      };\n    } else {\n      return {\n        error: error.message,\n        username: null\n      };\n    }\n  } catch (error) {\n    console.error(\"failed to fetch user\", error);\n    return {\n      error: \"Failed to load User information\",\n      username: null\n    };\n  }\n};\n\n/* \nexport const fetchUser = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token),\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const { data } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\n*/\n\nexport const createPost = async (token, description, title, price, location) => {\n  try {\n    const post = {\n      title: title,\n      description: description,\n      price: price\n    };\n    if (location) {\n      post.location = location;\n    }\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/posts\", {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: post\n      }\n    });\n    console.log(\"data!\", data);\n    if (success) {\n      return {\n        error: null,\n        post: data.post\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null\n      };\n    }\n  } catch (error) {\n    console.error(\"POST /post failed\", error);\n    return {\n      error: \"Failed to create Post\",\n      post: null\n    };\n  }\n};\n\n/* export const deletePost = aync (token, postId) => {\n  try {\nawait fetch {`${BASEURL}/posts/${postId}`, {\n  method: \"DELETE\"\n}}\n  } catch {\n\n  }\n} \n*/\n\nexport const deletePosts = async (token, postID) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(`/posts/${postID}`, {\n      method: \"DELETE\",\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        data: null\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null\n      };\n    }\n  } catch (error) {\n    console.error(\"DALATE /posts/postID failed:\".error);\n    return {\n      error: \"Failed to delete Post\",\n      data: null\n    };\n  }\n};","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","method","body","options","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","message","console","registerUser","username","password","user","loginUser","fetchUser","log","createPost","description","title","price","location","post","deletePosts","postID"],"sources":["/Users/martinhampton/Documents/course_work/StrangersThings/src/api/api.js"],"sourcesContent":["const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions = {}) => {\n  const { token, method, body } = defaultOptions;\n\n  const options = {\n    headers: makeHeaders(token),\n  };\n\n  if (method) {\n    options.method = method;\n  }\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  const response = await fetch(`${BASEURL}${endpointPath}`, options);\n  const result = await response.json();\n\n  return result;\n};\n\n/* const callAPI = async (endpointPath, defaultOptions = {}) => {\n  const options = {\n    headers: makeHeaders(defaultOptions.token),\n  };\n\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n\n  try {\n    const response = await fetch(`${BASEURL}${endpointPath}`, options);\n    const { success, error, data } = await response.json();\n\n    if (success) {\n      return {\n        error: null,\n        data: data,\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null,\n      };\n    }\n  } catch (error) {\n    console.error(`Failed while calling ${endpointPath}:`, error);\n  }\n  return {\n    error: defaultOptions.defaultError,\n    data: null,\n  };\n\n  return result;\n};\n\n*/\n\n/* export const fetchPosts = async (token) => {\n  const { error, data } = await callAPI(\"/posts\", {\n    bodyKey: \"posts\",\n    defaultError: \"Failed to load Posts\",\n  });\n\n  return {\n    error,\n    posts: data ? data.posts : [],\n  };\n};\n\n*/\n\nexport const fetchPosts = async (token) => {\n  try {\n    const { success, error, data } = await callAPI(\"/posts\", {\n      token: token,\n    });\n\n    if (success) {\n      return { error: null, posts: data.posts };\n    } else {\n      return {\n        error: error.message,\n        posts: [],\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n\n    return { error: \"Failed to load Posts\", posts: [] };\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const { success, error, data } = await callAPI(\"/users/register\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password,\n        },\n      },\n    });\n\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message,\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null,\n    };\n  }\n};\n\nexport const loginUser = async (username, password) => {\n  try {\n    const { success, error, data } = await callAPI(\"/users/login\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password,\n        },\n      },\n    });\n\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message,\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"there was an error registering the user\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null,\n    };\n  }\n};\n\n/*\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\n\n*/\n\nexport const fetchUser = async (token) => {\n  try {\n    const { success, error, data } = await callAPI(\"/users/me\", {\n      token: token,\n    });\n    console.log(\"data\", data);\n    if (success) {\n      return {\n        error: null,\n        username: data.username,\n      };\n    } else {\n      return {\n        error: error.message,\n        username: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"failed to fetch user\", error);\n\n    return {\n      error: \"Failed to load User information\",\n      username: null,\n    };\n  }\n};\n\n/* \nexport const fetchUser = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token),\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const { data } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\n*/\n\nexport const createPost = async (\n  token,\n  description,\n  title,\n  price,\n  location\n) => {\n  try {\n    const post = {\n      title: title,\n      description: description,\n      price: price,\n    };\n\n    if (location) {\n      post.location = location;\n    }\n\n    const { success, error, data } = await callAPI(\"/posts\", {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: post,\n      },\n    });\n    console.log(\"data!\", data);\n    if (success) {\n      return {\n        error: null,\n        post: data.post,\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"POST /post failed\", error);\n\n    return {\n      error: \"Failed to create Post\",\n      post: null,\n    };\n  }\n};\n\n/* export const deletePost = aync (token, postId) => {\n  try {\nawait fetch {`${BASEURL}/posts/${postId}`, {\n  method: \"DELETE\"\n}}\n  } catch {\n\n  }\n} \n*/\n\nexport const deletePosts = async (token, postID) => {\n  try {\n    const { success, error, data } = await callAPI(`/posts/${postID}`, {\n      method: \"DELETE\",\n      token: token,\n    });\n    if (success) {\n      return {\n        error: null,\n        data: null,\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"DALATE /posts/postID failed:\".error);\n    return {\n      error: \"Failed to delete Post\",\n      data: null,\n    };\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}