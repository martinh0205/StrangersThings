{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = \"Bearer ${token}\";\n  }\n  return headers;\n};\nconst callAPI = async (endpointPath, _ref) => {\n  let {\n    method,\n    body,\n    token\n  } = _ref;\n  const options = {\n    headers: makeHeaders(defaultOptions.token)\n  };\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetch(`${BASEURL}${endpointPath}`);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPosts = async token => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const {\n      data\n    } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\nexport const fetchUser = async token => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token)\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const {\n      data\n    } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\nexport const createPost = async () => {};","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","callAPI","endpointPath","method","body","options","defaultOptions","JSON","stringify","response","fetch","result","json","fetchPosts","console","log","data","posts","error","registerUser","username","password","user","fetchUser","createPost"],"sources":["/Users/martinhampton/Documents/course_work/StrangersThings/src/api/api.js"],"sourcesContent":["const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (token) {\n    headers[\"Authorization\"] = \"Bearer ${token}\";\n  }\n  return headers;\n};\n\nconst callAPI = async (endpointPath, { method, body, token }) => {\n  const options = {\n    headers: makeHeaders(defaultOptions.token),\n  };\n\n  if (defaultOptions.method) {\n    options.method = method;\n  }\n\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(body);\n  }\n\n  const response = await fetch(`${BASEURL}${endpointPath}`);\n  const result = await response.json();\n\n  return result;\n};\n\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n\n/*\nexport const fetchPosts = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"THIS IS THE RESPONSE\", response);\n    const { data } = await response.json();\n    console.log(\"THIS IS DATA\", data.posts);\n    return data.posts;\n  } catch (error) {\n    console.error(\"there was an error fetching posts\");\n  }\n};\n*/\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password,\n        },\n      }),\n    });\n    console.log(\"RESPONSE------>\", response);\n    const data = await response.json();\n    console.log(\"------------data------------\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n  }\n};\n\nexport const fetchUser = async (token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token),\n    });\n    console.log(\"USER RESP BODY ------------>\", response);\n    const { data } = await response.json();\n    console.log(\"USER DATA ----->\", data);\n    return data;\n  } catch {\n    console.log(error);\n  }\n};\n\nexport const createPost = async () => {};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}